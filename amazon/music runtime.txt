class Solution{
public:
  
   vector<int> findPair(vector<int>& vec, int target){
     if (vec.size() == 0) return {};
     vector<int> result;
     
     unordered_map<int, int> map;
     int curMax = INT_MIN;
     
     for(int i = 0; i < vec.size(); i++){
       int toLook = target - 30 - vec[i];
       
       if( map.find(toLook) != map.end()){
         if( max(toLook, vec[i]) > curMax){
           curMax = max(toLook, vec[i]);
           result = {i, map[toLook]};
         }
       }
       
       map[vec[i]] = i;
     }
     return result;
   }
  
  void printme(vector<int> v){
    cout << " ============ " << endl;
    for(int i: v)
      cout << i << "," << endl;
  }
};

int main() {
  std::cout << "Hello World!\n";
  vector<int> v1{1, 10, 25, 35, 60};
  vector<int> v2{20, 50, 40, 25, 30, 10};
  vector<int> v3{50, 20, 10, 40, 25, 30};
  
  Solution s;
  s.printme(s.findPair(v1, 90));
  s.printme(s.findPair(v2, 90));
  s.printme(s.findPair(v3, 90));
}