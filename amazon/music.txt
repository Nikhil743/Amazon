import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
/*
* Complete the 'findSongs' function below.
*
* The function is expected to return an INTEGER_ARRAY.
* The function accepts following parameters:
* 1. INTEGER rideDuration
* 2. INTEGER_ARRAY songDurations
*/
	public static List<Integer> findSongs(int rideDuration, List<Integer> songDurations) 
	{
        	List<Integer> out=new ArrayList<Integer>();
		int flag=0;
                for(int i=0;i<songDurations.size()-1;i++)
                {
                	for(int j=i+1;j<songDurations.size();j++)
                       	{	
                        	int totaltime=songDurations.get(i)+songDurations.get(j);
                                if(rideDuration-totaltime==30)
                               	{
                                	if(flag==1)
                                       	{
                                        	if(songDurations.get(i)>songDurations.get(out.get(0)) && songDurations.get(j)>songDurations.get(out.get(1)))
                                                {
                                                	out.removeAll(out);
                                                }
                                                else
                                                	break;
                                       	}
                                       	out.add(i);
                                       	out.add(j);
                                       	flag=1;
                                       	break;
                              	}
                      	}
              	}
              	if(out.size()<2)
              	{
                	out.removeAll(out);
                        out.add(-1);
                        out.add(-1);
              	}
              	return out;
	}
}